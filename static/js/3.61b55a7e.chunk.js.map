{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/saveProfileIco.png","assets/images/photoIco.png","assets/images/editProfileIco.png","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Posts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Posts.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsConteiner.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onClick","isOwner","input","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","alt","editProfileBtn","src","saveProfileIco","createField","Input","Textarea","Object","keys","contacts","map","key","contact","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","infoBlock","htmlFor","id","type","target","files","length","changePhotoBtn","userPhotoBlock","photos","large","UserAva","profileInfo","initialValues","formData","then","Posts","item","message","likesCount","MyPosts","React","memo","postsElement","posts","post","postsBlock","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","maxLenghtCreator","Field","component","placeholder","name","validate","required","postBtn","size","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.61b55a7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhotoBlock\":\"ProfileInfo_userPhotoBlock__N18ru\",\"contact\":\"ProfileInfo_contact__2A9Yx\",\"error\":\"ProfileInfo_error__2ynNX\",\"status\":\"ProfileInfo_status__3sx4g\",\"input\":\"ProfileInfo_input__1hvP_\",\"changePhotoBtn\":\"ProfileInfo_changePhotoBtn__15Ckv\",\"editProfileBtn\":\"ProfileInfo_editProfileBtn__3bZ-T\",\"infoBlock\":\"ProfileInfo_infoBlock__3gl6B\"};","module.exports = __webpack_public_path__ + \"static/media/saveProfileIco.59f3d3af.png\";","module.exports = __webpack_public_path__ + \"static/media/photoIco.10b598ca.png\";","module.exports = __webpack_public_path__ + \"static/media/editProfileIco.428fbbfc.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3nXHg\",\"posts\":\"MyPosts_posts__30NYH\",\"form\":\"MyPosts_form__1IDYi\",\"postBtn\":\"MyPosts_postBtn__3cVbt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Posts_item__2QBOj\"};","import React, {useEffect, useState} from 'react';\nimport s from './ProfileInfo.module.css'\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n\n        setStatus(props.status)\n    }, [props.status]);\n\n\n    const activateEditMode = () => {\n        props.isOwner\n        ? setEditMode(true)\n        : setEditMode(false);\n\n    };\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateUserStatus(status);\n    };\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    };\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <b>Status: </b><span className={s.status} onClick={activateEditMode}>{props.status || '___________'} </span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input className={s.input}\n                       onChange={onStatusChange}\n                       autoFocus={true}\n                       onBlur={deactivateEditMode}\n                       value={status}/>\n            </div>\n            }\n        </div>\n    )\n};\n\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {reduxForm} from \"redux-form\";\nimport s from './ProfileInfo.module.css';\nimport saveProfileIco from './../../../assets/images/saveProfileIco.png'\n\n\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <img alt='' className={s.editProfileBtn} src={saveProfileIco} onClick={handleSubmit}/>\n                {error && <div className={s.error}> {error} </div>}\n            </div>\n            <div>\n                <b>Full name:</b> {createField('Full name', 'text', 'fullName', Input)}\n            </div>\n            <div>\n                <b>Looking for a job: </b>{createField(\"\", 'checkbox', 'lookingForAJob', Input)}\n            </div>\n            <div>\n                <b>My professional skills: </b>\n                {createField('My professional skills:', 'text', 'lookingForAJobDescription', Textarea,)}\n            </div>\n            <div>\n                <b>About me: </b>\n                {createField('About me:', 'text', 'aboutMe', Textarea,)}\n            </div>\n            <div>\n                <b>Contacts: </b>{Object.keys(profile.contacts).map(key => {\n                return <div key={key} className={s.contact}>\n                    <b>{key}:{createField(key, 'text', 'contacts.' + key, Input)}</b>\n                </div>\n            })}\n            </div>\n        </form>\n    )\n};\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\n\nexport default ProfileDataFormReduxForm;\n\n\n\n\n\n","import React, {useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport UserAva from '../../../assets/images/userPhotoIco.png';\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport changePhotoBtn from '../../../assets/images/photoIco.png'\nimport editProfileBtn from '../../../assets/images/editProfileIco.png'\n\n\nconst ProfileInfo = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\n    const [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const mainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    };\n\n    const onSubmit = (formData) => {\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        )\n    };\n\n    return (\n        <div className={s.infoBlock}>\n            {isOwner &&\n            <label htmlFor=\"my-file-selector\">\n                <input id=\"my-file-selector\" type=\"file\" className=\"d-none\" onChange={mainPhotoSelected}/>\n                <img alt='' className={s.changePhotoBtn} src={changePhotoBtn}/>\n            </label>}\n            <div className={s.userPhotoBlock}>\n                <img alt='' src={profile.photos.large || UserAva}/>\n\n                 <ProfileStatusWithHooks isOwner={isOwner} className={s.status} status={status} updateUserStatus={updateUserStatus}/>\n\n\n            </div>\n            <div className={s.profileInfo}>\n                {editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => { setEditMode(true) }}\n                                   profile={profile}\n                                   isOwner={isOwner}/>}\n            </div>\n\n\n        </div>\n    )\n};\n\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div>\n            <div>\n                {isOwner && <img onClick={goToEditMode} alt='' className={s.editProfileBtn} src={editProfileBtn}/>}\n            </div>\n            <div>\n                <b>Full name:</b> {profile.fullName}\n            </div>\n            <div>\n                <b>Looking for a job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\n            </div>\n            {profile.lookingForAJob &&\n            <div>\n                <b>My professional skills: </b>{profile.lookingForAJobDescription}\n            </div>\n            }\n            <div>\n                <b>About me: </b>{profile.aboutMe}\n            </div>\n\n            <div>\n                <b>Contacts: </b>{Object.keys(profile.contacts).map(key => {\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n            })}\n            </div>\n        </div>\n    )\n};\n\n\nexport const Contact = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n};\n\n\nexport default ProfileInfo;\n\n\n","import React from 'react';\nimport s from './Posts.module.css';\n\nconst   Posts = (props) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://static.tildacdn.com/tild3739-6264-4166-b438-626535346335/image.png\"\n    alt=\"\"/>\n            {props.message}\n            <div>\n                <span>Like</span> {props.likesCount}\n            </div>\n        </div>\n    )\n};\n\nexport default Posts;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from './Post/Posts';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLenghtCreator, required} from \"../../../helpers/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nconst MyPosts = React.memo(props => {\n\n    let postsElement = props.posts.map(post => <Posts message={post.message} key={post.id}\n                                                      likesCount={post.likesCount}/>);\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText)\n    };\n\n    return (\n\n        <div className={s.postsBlock}>\n\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElement}\n            </div>\n        </div>\n\n    )\n});\n\nconst maxLength10 = maxLenghtCreator(10);\n\nconst AddNewPostForm = (props) => {\n    return (\n        <div>\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    <div className={s.posts}>\n                        <Field className={s.form} component={Textarea} placeholder='Your message'\n                               name={'newPostText'} validate={[required, maxLength10]}/>\n                        <button className={s.postBtn} size=\"sm\">Add post</button>\n                    </div>\n\n                </div>\n            </form>\n        </div>\n    )\n};\n\nconst AddNewPostFormRedux = reduxForm({form: 'ProfileAddMyPostForm'})(AddNewPostForm);\n\n\nexport default MyPosts;","\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\nimport MyPosts from './MyPosts';\nimport {connect} from 'react-redux';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsConteiner';\nimport Preloader from \"../common/Preloader/Preloader\";\n\n\nconst Profile = (props) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         updateUserStatus={props.updateUserStatus}\n                         saveProfile={props.saveProfile}/>\n            <MyPostsContainer/>\n        </div>\n    )\n};\n\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n\n        let userId = this.props.match.params.userId;\n\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push('/login');\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getUserStatus(userId);\n    }\n\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateUserStatus={this.props.updateUserStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);"],"sourceRoot":""}